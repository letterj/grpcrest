// Code generated by protoc-gen-gogo.
// source: grpcrest.proto
// DO NOT EDIT!

/*
Package grpcrest is a generated protocol buffer package.

It is generated from these files:
	grpcrest.proto

It has these top-level messages:
	CreateWRequest
	CreateWResponse
	ListWRequest
	ListWResponse
	DeleteWRequest
	DeleteWResponse
	UpdateWRequest
	UpdateWResponse
	ShowWRequest
	ShowWResponse
*/
package grpcrest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Create Widget Request
type CreateWRequest struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CreateWRequest) Reset()                    { *m = CreateWRequest{} }
func (m *CreateWRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateWRequest) ProtoMessage()               {}
func (*CreateWRequest) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{0} }

// Create Widget Response
type CreateWResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CreateWResponse) Reset()                    { *m = CreateWResponse{} }
func (m *CreateWResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateWResponse) ProtoMessage()               {}
func (*CreateWResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{1} }

// List Widget Request
type ListWRequest struct {
}

func (m *ListWRequest) Reset()                    { *m = ListWRequest{} }
func (m *ListWRequest) String() string            { return proto.CompactTextString(m) }
func (*ListWRequest) ProtoMessage()               {}
func (*ListWRequest) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{2} }

// List Widget Response
type ListWResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ListWResponse) Reset()                    { *m = ListWResponse{} }
func (m *ListWResponse) String() string            { return proto.CompactTextString(m) }
func (*ListWResponse) ProtoMessage()               {}
func (*ListWResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{3} }

// Delete Widget Request
type DeleteWRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteWRequest) Reset()                    { *m = DeleteWRequest{} }
func (m *DeleteWRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteWRequest) ProtoMessage()               {}
func (*DeleteWRequest) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{4} }

// Delete Widget Response
type DeleteWResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *DeleteWResponse) Reset()                    { *m = DeleteWResponse{} }
func (m *DeleteWResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteWResponse) ProtoMessage()               {}
func (*DeleteWResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{5} }

// Update Widget Request
type UpdateWRequest struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UpdateWRequest) Reset()                    { *m = UpdateWRequest{} }
func (m *UpdateWRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWRequest) ProtoMessage()               {}
func (*UpdateWRequest) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{6} }

// Update Widget Response
type UpdateWResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UpdateWResponse) Reset()                    { *m = UpdateWResponse{} }
func (m *UpdateWResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateWResponse) ProtoMessage()               {}
func (*UpdateWResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{7} }

// Show Widget Request
type ShowWRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ShowWRequest) Reset()                    { *m = ShowWRequest{} }
func (m *ShowWRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowWRequest) ProtoMessage()               {}
func (*ShowWRequest) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{8} }

// SHow Widget Response
type ShowWResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ShowWResponse) Reset()                    { *m = ShowWResponse{} }
func (m *ShowWResponse) String() string            { return proto.CompactTextString(m) }
func (*ShowWResponse) ProtoMessage()               {}
func (*ShowWResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpcrest, []int{9} }

func init() {
	proto.RegisterType((*CreateWRequest)(nil), "grpcrest.createWRequest")
	proto.RegisterType((*CreateWResponse)(nil), "grpcrest.createWResponse")
	proto.RegisterType((*ListWRequest)(nil), "grpcrest.listWRequest")
	proto.RegisterType((*ListWResponse)(nil), "grpcrest.listWResponse")
	proto.RegisterType((*DeleteWRequest)(nil), "grpcrest.deleteWRequest")
	proto.RegisterType((*DeleteWResponse)(nil), "grpcrest.deleteWResponse")
	proto.RegisterType((*UpdateWRequest)(nil), "grpcrest.updateWRequest")
	proto.RegisterType((*UpdateWResponse)(nil), "grpcrest.updateWResponse")
	proto.RegisterType((*ShowWRequest)(nil), "grpcrest.showWRequest")
	proto.RegisterType((*ShowWResponse)(nil), "grpcrest.showWResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for GRPCRestApi service

type GRPCRestApiClient interface {
	CreateWidget(ctx context.Context, in *CreateWRequest, opts ...grpc.CallOption) (*CreateWResponse, error)
	ListWidget(ctx context.Context, in *ListWRequest, opts ...grpc.CallOption) (*ListWResponse, error)
	DeleteWidget(ctx context.Context, in *DeleteWRequest, opts ...grpc.CallOption) (*DeleteWResponse, error)
	UpdateWidget(ctx context.Context, in *UpdateWRequest, opts ...grpc.CallOption) (*UpdateWResponse, error)
	ShowWidget(ctx context.Context, in *ShowWRequest, opts ...grpc.CallOption) (*ShowWResponse, error)
}

type gRPCRestApiClient struct {
	cc *grpc.ClientConn
}

func NewGRPCRestApiClient(cc *grpc.ClientConn) GRPCRestApiClient {
	return &gRPCRestApiClient{cc}
}

func (c *gRPCRestApiClient) CreateWidget(ctx context.Context, in *CreateWRequest, opts ...grpc.CallOption) (*CreateWResponse, error) {
	out := new(CreateWResponse)
	err := grpc.Invoke(ctx, "/grpcrest.gRPCRestApi/createWidget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRestApiClient) ListWidget(ctx context.Context, in *ListWRequest, opts ...grpc.CallOption) (*ListWResponse, error) {
	out := new(ListWResponse)
	err := grpc.Invoke(ctx, "/grpcrest.gRPCRestApi/listWidget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRestApiClient) DeleteWidget(ctx context.Context, in *DeleteWRequest, opts ...grpc.CallOption) (*DeleteWResponse, error) {
	out := new(DeleteWResponse)
	err := grpc.Invoke(ctx, "/grpcrest.gRPCRestApi/deleteWidget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRestApiClient) UpdateWidget(ctx context.Context, in *UpdateWRequest, opts ...grpc.CallOption) (*UpdateWResponse, error) {
	out := new(UpdateWResponse)
	err := grpc.Invoke(ctx, "/grpcrest.gRPCRestApi/updateWidget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRestApiClient) ShowWidget(ctx context.Context, in *ShowWRequest, opts ...grpc.CallOption) (*ShowWResponse, error) {
	out := new(ShowWResponse)
	err := grpc.Invoke(ctx, "/grpcrest.gRPCRestApi/showWidget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GRPCRestApi service

type GRPCRestApiServer interface {
	CreateWidget(context.Context, *CreateWRequest) (*CreateWResponse, error)
	ListWidget(context.Context, *ListWRequest) (*ListWResponse, error)
	DeleteWidget(context.Context, *DeleteWRequest) (*DeleteWResponse, error)
	UpdateWidget(context.Context, *UpdateWRequest) (*UpdateWResponse, error)
	ShowWidget(context.Context, *ShowWRequest) (*ShowWResponse, error)
}

func RegisterGRPCRestApiServer(s *grpc.Server, srv GRPCRestApiServer) {
	s.RegisterService(&_GRPCRestApi_serviceDesc, srv)
}

func _GRPCRestApi_CreateWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GRPCRestApiServer).CreateWidget(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GRPCRestApi_ListWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GRPCRestApiServer).ListWidget(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GRPCRestApi_DeleteWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GRPCRestApiServer).DeleteWidget(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GRPCRestApi_UpdateWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpdateWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GRPCRestApiServer).UpdateWidget(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GRPCRestApi_ShowWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ShowWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GRPCRestApiServer).ShowWidget(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _GRPCRestApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcrest.gRPCRestApi",
	HandlerType: (*GRPCRestApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createWidget",
			Handler:    _GRPCRestApi_CreateWidget_Handler,
		},
		{
			MethodName: "listWidget",
			Handler:    _GRPCRestApi_ListWidget_Handler,
		},
		{
			MethodName: "deleteWidget",
			Handler:    _GRPCRestApi_DeleteWidget_Handler,
		},
		{
			MethodName: "updateWidget",
			Handler:    _GRPCRestApi_UpdateWidget_Handler,
		},
		{
			MethodName: "showWidget",
			Handler:    _GRPCRestApi_ShowWidget_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *CreateWRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateWRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *CreateWResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateWResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Result)))
		i += copy(data[i:], m.Result)
	}
	return i, nil
}

func (m *ListWRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListWRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListWResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListWResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Result)))
		i += copy(data[i:], m.Result)
	}
	return i, nil
}

func (m *DeleteWRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteWRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	return i, nil
}

func (m *DeleteWResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteWResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Result)))
		i += copy(data[i:], m.Result)
	}
	return i, nil
}

func (m *UpdateWRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateWRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func (m *UpdateWResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateWResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Result)))
		i += copy(data[i:], m.Result)
	}
	return i, nil
}

func (m *ShowWRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ShowWRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	return i, nil
}

func (m *ShowWResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ShowWResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpcrest(data, i, uint64(len(m.Result)))
		i += copy(data[i:], m.Result)
	}
	return i, nil
}

func encodeFixed64Grpcrest(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Grpcrest(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGrpcrest(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *CreateWRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func (m *CreateWResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func (m *ListWRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListWResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func (m *DeleteWRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func (m *DeleteWResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func (m *UpdateWRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func (m *UpdateWResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func (m *ShowWRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func (m *ShowWResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGrpcrest(uint64(l))
	}
	return n
}

func sovGrpcrest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGrpcrest(x uint64) (n int) {
	return sovGrpcrest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateWRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: createWRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: createWRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateWResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: createWResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: createWResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: listWRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: listWRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: listWResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: listWResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteWRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deleteWRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deleteWRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteWResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deleteWResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deleteWResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateWRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateWRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateWResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateWResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowWRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: showWRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: showWRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowWResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: showWResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: showWResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpcrest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpcrest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpcrest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpcrest(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpcrest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpcrest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGrpcrest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGrpcrest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGrpcrest(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGrpcrest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpcrest   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorGrpcrest = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2f, 0x2a, 0x48,
	0x2e, 0x4a, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x54,
	0xb8, 0xf8, 0x80, 0x8c, 0xc4, 0x92, 0xd4, 0xf0, 0xa0, 0xd4, 0xc2, 0x52, 0xa0, 0x88, 0x90, 0x10,
	0x17, 0x4b, 0x4a, 0x62, 0x49, 0xa2, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0xad, 0xa4,
	0xc9, 0xc5, 0x0f, 0x57, 0x55, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc6, 0xc5, 0x06, 0x34,
	0xa0, 0x34, 0xa7, 0x04, 0xaa, 0x10, 0xca, 0x53, 0xe2, 0xe3, 0xe2, 0xc9, 0xc9, 0x2c, 0x2e, 0x81,
	0x19, 0xa7, 0xa4, 0xce, 0xc5, 0x0b, 0xe5, 0x13, 0xd0, 0xa8, 0xc0, 0xc5, 0x97, 0x92, 0x9a, 0x93,
	0x8a, 0xe4, 0x12, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0xa8, 0x2a, 0x20, 0x0b, 0xe4, 0x0a, 0xb8, 0x0a,
	0x02, 0x86, 0x01, 0xbd, 0x55, 0x5a, 0x90, 0x42, 0x84, 0xb7, 0xe0, 0xaa, 0x08, 0x18, 0x28, 0xc7,
	0xc5, 0x53, 0x9c, 0x91, 0x5f, 0x8e, 0xd3, 0x6d, 0x40, 0x6f, 0x42, 0xe5, 0xf1, 0x1b, 0x64, 0xf4,
	0x84, 0x89, 0x8b, 0x3b, 0x3d, 0x28, 0xc0, 0x19, 0xa8, 0xb0, 0xc4, 0xb1, 0x20, 0x53, 0xc8, 0x95,
	0x8b, 0x07, 0x1a, 0xb4, 0x99, 0x29, 0xe9, 0xa9, 0x25, 0x42, 0x12, 0x7a, 0xf0, 0xb8, 0x42, 0x8d,
	0x18, 0x29, 0x49, 0x2c, 0x32, 0x10, 0xcb, 0x94, 0x18, 0x84, 0xec, 0xb9, 0xb8, 0xc0, 0xc1, 0x0c,
	0x31, 0x44, 0x0c, 0xa1, 0x14, 0x39, 0x32, 0xa4, 0xc4, 0x31, 0xc4, 0xe1, 0x06, 0x00, 0xdd, 0x01,
	0x0d, 0x5c, 0x0c, 0x77, 0xa0, 0x46, 0x0b, 0xb2, 0x3b, 0xd0, 0xa2, 0x03, 0x62, 0x0c, 0x34, 0x48,
	0x31, 0x8c, 0x41, 0x8d, 0x10, 0x64, 0x63, 0xd0, 0x22, 0x01, 0xe2, 0x1d, 0x70, 0x70, 0x62, 0x78,
	0x07, 0x39, 0x12, 0x90, 0xbd, 0x83, 0x12, 0xf8, 0x4a, 0x0c, 0x4e, 0x02, 0x27, 0x1e, 0xc9, 0x31,
	0x5e, 0x00, 0xe2, 0x07, 0x40, 0x3c, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x38, 0xe9, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x44, 0xe3, 0xa4, 0x0c, 0x03, 0x00, 0x00,
}
